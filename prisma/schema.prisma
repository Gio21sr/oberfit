generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Clase {
  id_clase               Int                    @id @default(autoincrement()) @map("id_clase")
  nombre_clase           String                 @map("nombre_clase") @db.VarChar(255)
  descripcion            String                 @db.Text
  fecha_hora             DateTime               @map("fecha_hora")
  cupo                   Int
  capacidad_maxima       Int?                   @map("capacidad_maxima")
  inscripciones          Inscripcion[]
  inscripcionesVisitante InscripcionVisitante[]

  @@map("clases")
}

model Inscripcion {
  id_inscripcion Int         @id @default(autoincrement()) @map("id_inscripcion")
  id_usuario     Int         @map("id_usuario")
  id_clase       Int         @map("id_clase")
  fecha_registro DateTime    @default(now()) @map("fecha_registro") @db.Timestamp(0)
  metodo_pago    MetodoPago? @map("metodo_pago")
  clase          Clase       @relation(fields: [id_clase], references: [id_clase])
  usuario        User        @relation(fields: [id_usuario], references: [id])

  @@index([id_clase], map: "inscripciones_id_clase_fkey")
  @@index([id_usuario], map: "inscripciones_id_usuario_fkey")
  @@map("inscripciones")
}

model InscripcionVisitante {
  id_visitante Int     @id @default(autoincrement()) @map("id_visitante")
  correo       String  @db.VarChar(255)
  codigo       Int
  id_clase     Int     @map("id_clase")
  nombre       String  @db.VarChar(255)
  metodo_pago  Boolean @map("metodo_pago")
  clase        Clase   @relation(fields: [id_clase], references: [id_clase])

  @@index([id_clase], map: "inscripcionvisitante_id_clase_fkey")
  @@map("inscripcionvisitante")
}

model User {
  id               Int           @id @default(autoincrement()) @map("id_usuario")
  name             String?       @map("nom_usuario")
  email            String?       @unique @map("correo")
  password         String?       @map("contrasena")
  es_socio         Boolean?      @map("es_socio")
  clases_restantes Int?          @map("clases_restantes")
  last_reset_month DateTime?     @map("last_reset_month")
  role             String?       @map("role") @db.VarChar(50)
  emailVerified    DateTime?     @map("emailVerified")
  image            String?
  accounts         Account[]
  inscripciones    Inscripcion[]
  sessions         Session[]

  @@map("usuarios")
}

model Account {
  id                String  @id @default(cuid())
  userId            Int     @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], map: "accounts_user_id_fkey")
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       Int      @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "sessions_user_id_fkey")
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

enum MetodoPago {
  caja
  transferencia
  socio
}
